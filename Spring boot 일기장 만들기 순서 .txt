Spring boot 일기장 만들기 순서 

====New Project START===========

먼저 왼쪽상단에 New -> Project 클릭
Spring Initializr 에 Name(제목) 설정후

Langauage : Java
Type : Gradle-Groovy
JDK : 자바17버전
Java: 17
Packaing : Jar 

로 설정하고 Next 클릭

Spring Boot 버전 (3.2.4 사용)
DeveloperTools - Lombok 
Web - Spring Web
SQL - Spring Data JPA
SQL - H2 Database 

설정하고 Create 

====New Project END============
 



====src/main/java/내가지정한패키지이름 에 
new > package  해서 Dto, Controller, Domain, Repository, Service 생성 

=================================
Controller 
	DiaryApiController

package com.codehows.diary.Controller;

import com.codehows.diary.Domain.Diary;
import com.codehows.diary.Dto.AddDiaryRequest;
import com.codehows.diary.Repository.DiaryRepository;
import com.codehows.diary.Service.DiaryService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RequiredArgsConstructor
@RestController
public class DiaryApiController {
    private final DiaryService diaryService;

    @PostMapping("/api/diaries")
    //@Request body 로 요청 본문 값 매핑
    public ResponseEntity<Diary> addDiary(@RequestBody AddDiaryRequest request){
        Diary savedDiary = diaryService.save(request);

        return ResponseEntity.status(HttpStatus.CREATED)
                .body(savedDiary);
    }
}



=================================
Domain
	Diary

package com.codehows.diary.Domain;

import jakarta.persistence.*;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;

@Entity
@Getter
@NoArgsConstructor
public class Diary {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id" , updatable = false)
    private Long id;

    @Column(name = "title", nullable = false)
    private String title;

    @Column(name = "content" , nullable = false)
    private String content;

    @Builder
    public Diary(String title, String content){
        this.title =  title;
        this.content = content;
    }

}



=================================
Dto
	AddDiaryRequest

package com.codehows.diary.Dto;

import com.codehows.diary.Domain.Diary;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

@NoArgsConstructor
@AllArgsConstructor
@Getter
public class AddDiaryRequest {
    private String title;
    private String content;

    public Diary toEntity(){
        return Diary.builder()
                .title(title)
                .content(content)
                .build();
    }
}


=================================
Repository
	DiaryRepository 


package com.codehows.diary.Repository;


import com.codehows.diary.Domain.Diary;
import org.springframework.data.jpa.repository.JpaRepository;

public interface DiaryRepository extends JpaRepository<Diary,Long> {
}




=================================
Service
	DiaryService

package com.codehows.diary.Service;

import com.codehows.diary.Domain.Diary;
import com.codehows.diary.Dto.AddDiaryRequest;
import com.codehows.diary.Repository.DiaryRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@RequiredArgsConstructor
@Service
public class DiaryService {
    private final DiaryRepository diaryRepository;
 //일기장 글추가 메서드
    public Diary save(AddDiaryRequest request){
        return diaryRepository.save(request.toEntity());
    }
}


=================================
resources
	application.yml


spring:
  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql:true
    defer-datasource-initialization: true

  datasource:
    url: jdbc:h2:mem:test

  h2:
    console:
      enabled: true



==================================

만드는 순서 

Domain -Diary (여기서 DB 컬럼등을 만듦)
Repository - DiaryRepository (만들 컬럼 조작)
Dto - AddDiaryRequest (엔티티로 만듦)
Service - DiaryService 	(엔티티 만들걸 저장, 컬럼사용) 
Controller - DiaryApiController  -(사용자 요청 받음 그리고 View로 데이터 전달)



이렇게 만든뒤에 
View 에게 데이터 전달위해 객체 만들고 

Controller 에서 새로운 Controller.java 를 만들어 
GetMapping 하여 창을 보여주게됨




===================================

블로그 글목록 조회 추가하기

1. Service 메서드 추가하기 

    public List<Diary> findAll(){
        return diaryRepository.findAll();
    }



2. 응답을 위한 Dto 생성 (dto 에 DiaryResponse.java 생성) 

package com.codehows.diary.Dto;

import com.codehows.diary.Domain.Diary; 
import lombok.Getter;

@Getter
public class DiaryResponse {
    private final String title;
    private final String content;

    public DiaryResponse(Diary diary){
        this.title=diary.getTitle();
        this.content= diary.getContent();
    }
}

3. Controller 추가 (DiaryApiController) 전체글 열어 조회후 반환하는 findAllDiaries() 메서드 추가 

    @GetMapping("/api/diaries")
    public ResponseEntity<List<DiaryResponse>> findAllDiaries(){
        List<DiaryResponse> diaries = diaryService.findAll()
                .stream()
                .map(DiaryResponse::new)
                .toList();

        return ResponseEntity.ok()
                .body(diaries);
    }



그다음 
resources 에 data.sql 을 만들어서 아래처럼 대입 
insert into Diary (title, content) values ('4월 3일 해피 웬즈데이','오늘은 내가 주인공');
insert into Diary (title, content) values ('4월 13일 고등학교 친구연락','친구한테서 연락이 왔는데..');
insert into Diary (title, content) values ('4월 18일 덥다 이제 여름?','이제 진짜 여름인가 너무 덥다 덥디덥디더운 여름~');


그래서 POSTMAN 을 열어서 메서드를 GET 으로 하고 SEND 하면 이 3개가 뜨면 성공




==========================================================

글조회 구현

1. Service 메서드 추가하기 

    public Diary findById(long id){
        return diaryRepository.findById(id)
                .orElseThrow(()-> new IllegalArgumentException("not found: " + id));
    }

2. Controller   -DiaryApiController  / findDiary 메서드 추가 


    @GetMapping("/api/diaries/{id}")
    public ResponseEntity<DiaryResponse> findDiary(@PathVariable long id){
        Diary diary = diaryService.findById(id);

        return ResponseEntity.ok()
                .body(new DiaryResponse(diary));
    }


그리고 POSTMAN 으로 확인 

=============================================================
 
글삭제 구현

1. Service 메서드 추가하기 

    public void delete(long id){
         diaryRepository.deleteById(id);
    }


2. Controller   -DiaryApiController  / deleteDiary 메서드 추가 

    @DeleteMapping("/api/diaries/{id}")
    public ResponseEntity<Void> deleteDiary(@PathVariable long id){
        diaryService.delete(id);

        return ResponseEntity.ok()
                .build();
    }

그리고 재실행후  POSTMAN 으로확인 
===============================================================

수정하기

1. entity를 바꿔야함 Diary 에 아래코드 추가 


    public void update(String title, String content){
        this.title = title;
        this.content= content;
    }



2. dto 에 글수정 요청 받을 것 만듦 UpdateDiaryRequest

package com.codehows.diary.Dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;

@NoArgsConstructor
@AllArgsConstructor
@Getter
public class UpdateDiaryRequest {
    private String title;
    private String content;
}


3. Service에 메서드 추가 ( Transactional 도 추가) 

    @Transactional
    public Diary update(long id, UpdateDiaryRequest request){
        Diary diary = diaryRepository.findById(id)
                .orElseThrow(()->new IllegalArgumentException("not foound : " + id));

        diary.update(request.getTitle(), request.getContent());
        return diary;
    }


4.controller 에 PutMapping 생성
 

    @PutMapping("/api/diaries/{id}")
    public ResponseEntity<Diary> updateDiary(@PathVariable long id,
                                             @RequestBody UpdateDiaryRequest request){
        Diary updatedDiary = diaryService.update(id,request);

        return ResponseEntity.ok()
                .body(updatedDiary);
    }


그리고 POST MAN 으로 PUT 설정후 데이터 수정 그리고 확인하면 수정되어있음 


===============================================================


이때부터 블로그 구성 한다 



먼저 build.gradle 로 가서 thymeleaf 이거 dependences 에 추가 

    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'


그리고 html 원하는것 처럼 꾸미고 실행 


===============================================================


블로그 글 클릭시 열림 + 생성 수정시간 추가

1. Diary 엔티티에 추가 


    @CreatedDate
    @Column(name = "created_at")
    private LocalDateTime createdAt;
    
    @LastModifiedDate
    @Column(name = "updated_at")
    private LocalDateTime updatedAt; 


2. Data.sql 도 추가해주기 
insert into Diary (title, content, created_at , updated_at) values ('4월 3일 해피 웬즈데이','오늘은 내가 주인공',Now(),Now());
insert into Diary (title, content, created_at , updated_at) values ('4월 13일 고등학교 친구연락','친구한테서 연락이 왔는데..',Now(),Now());
insert into Diary (title, content, created_at , updated_at) values ('4월 18일 덥다 이제 여름?','이제 진짜 여름인가 너무 덥다 덥디덥디더운 여름~',Now(),Now());




3. 실행 파일에서 엔티티의 자동업테이트 위한 어노테이션 추가

@EnableJpaAuditing


4. 뷰에서 쓸 dto  제작 DiaryViewResponse.java 생성


package com.codehows.diary.Dto;

import com.codehows.diary.Domain.Diary;
import lombok.Getter;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

@NoArgsConstructor
@Getter
public class DiaryViewResponse {
    private  Long id;
    private  String title;
    private  String content;
    private LocalDateTime createdAt;
    public DiaryViewResponse(Diary diary) {
        this.id = diary.getId();
        this.title = diary.getTitle();
        this.content = diary.getContent();
        this.createdAt= diary.getCreatedAt();
    }
}





5. DiaryViewController에 메세드 추가  getDiary()


    @GetMapping("/diaries/{id}")
    public String getDiary(@PathVariable Long id, Model model){
        Diary diary = diaryService.findById(id);
        model.addAttribute("diary", new DiaryViewResponse(diary));
        
        return "diary";
    }



6. html 보일 창 만들기 


=============================================

새글 쓰기 창 
1.controller , DiaryViewController


    @GetMapping("/new-article")
    public String newArticle(@RequestParam(required = false) Long id, Model model){
        if(id == null){
            model.addAttribute("Diary", new DiaryViewResponse());
        } else{
            Diary diary = diaryService.findById(id);
            model.addAttribute("Diary", new DiaryViewResponse(diary));
        }

        return "newArticle";
    }

 


2. newDiary.html 만들기



3.Diary.js 로 수정,생성 기능 추가 




